name: AI Review

on:
  pull_request:
    types: [opened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-review:
    # Run on:
    # - PR events when ready_for_review or opened as nonâ€‘draft
    # - Issue comments only when it's a PR thread, command is /review, and commenter is trusted
    if: |
      (github.event_name == 'pull_request' && ((github.event.action == 'ready_for_review') || (github.event.action == 'opened' && github.event.pull_request.draft == false))) ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        (github.event.comment.body == '/review' || startsWith(github.event.comment.body, '/review ')) &&
        (github.event.sender.association == 'MEMBER' || github.event.sender.association == 'OWNER' || github.event.sender.association == 'COLLABORATOR')
      )
    runs-on: ubuntu-latest
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve PR context
        env:
          GH_TOKEN: ${{ github.token }}
          PR_FROM_PR: ${{ github.event.pull_request.number }}
          PR_FROM_ISSUE: ${{ github.event.issue.number }}
        run: |
          set -euo pipefail
          PR_NUMBER="${PR_FROM_PR:-}"
          if [ -z "${PR_NUMBER:-}" ] || [ "$PR_NUMBER" = "null" ]; then
            PR_NUMBER="${PR_FROM_ISSUE:-}"
          fi
          if [ -z "${PR_NUMBER:-}" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "PR number not provided." >&2
            exit 1
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          gh api repos/${{ github.repository }}/pulls/${PR_NUMBER} > pr.json
          echo "BASE_REF=$(jq -r '.base.ref' pr.json)" >> $GITHUB_ENV
          echo "HEAD_REF=$(jq -r '.head.ref' pr.json)" >> $GITHUB_ENV

      - name: React to /review (start)
        if: github.event_name == 'issue_comment'
        env:
          GH_TOKEN: ${{ github.token }}
          COMMENT_ID: ${{ github.event.comment.id }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          reaction_id=""
          if reaction_id=$(gh api \
            -X POST \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/issues/comments/${COMMENT_ID}/reactions" \
            -f content=eyes \
            --jq '.id // empty'); then
            if [ -n "${reaction_id}" ]; then
              echo "COMMENT_REACTION_ID=${reaction_id}" >> "$GITHUB_ENV"
            fi
          else
            status=$?
            echo "::warning::Failed to add eyes reaction to comment ${COMMENT_ID} (exit ${status})." >&2
          fi

      - name: React on PR (start)
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          reaction_id=""
          if reaction_id=$(gh api \
            -X POST \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/issues/${PR_NUMBER}/reactions" \
            -f content=eyes \
            --jq '.id // empty'); then
            if [ -n "${reaction_id}" ]; then
              echo "PR_REACTION_ID=${reaction_id}" >> "$GITHUB_ENV"
            fi
          else
            status=$?
            echo "::warning::Failed to add eyes reaction to PR ${PR_NUMBER} (exit ${status})." >&2
          fi

      - name: Check out PR head
        run: |
          set -euo pipefail
          git fetch origin "pull/${PR_NUMBER}/head:pr_head"
          git checkout -B pr_head pr_head

      - name: Fetch all remote branches
        run: git fetch origin "+refs/heads/*:refs/remotes/origin/*"

      - name: Ensure local base branch ref exists
        run: |
          BASE_REF="${BASE_REF:-main}"
          if ! git show-ref --verify --quiet "refs/heads/${BASE_REF}"; then
            git branch --track "${BASE_REF}" "origin/${BASE_REF}" || true
          fi

      - name: Ensure provider key exists
        run: |
          if [ -z "${OPENROUTER_API_KEY:-}" ]; then
            echo "OPENROUTER_API_KEY is not set. Add it to repository secrets." >&2
            exit 2
          fi

      - name: Detect documentation changes
        run: |
          set -euo pipefail
          # Compare PR head against BASE_REF and look for .md/.mdx changes
          CHANGED=$(git diff --name-only "$BASE_REF"...HEAD | grep -E '\.(md|mdx)$' || true)
          if [ -z "$CHANGED" ]; then
            echo "DOCS_CHANGED=false" >> $GITHUB_ENV
            echo "No .md/.mdx changes detected; skipping AI review." >&2
          else
            echo "DOCS_CHANGED=true" >> $GITHUB_ENV
            echo "$CHANGED" | sed 's/^/- /' >&2
          fi

      - name: Comment about skip
        if: env.DOCS_CHANGED != 'true' && github.event_name == 'issue_comment'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          API="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          BODY=$(cat <<'TXT'
          Docs review skipped: no .md or .mdx changes were detected in this PR compared to the base branch. The /review command only targets documentation content. If you believe this is incorrect, please check that your docs files are included in the diff and try again.
          TXT
          )
          jq -n --arg body "$BODY" '{body:$body}' > payload.json
          curl -sS -X POST "$API" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/json" \
            -d @payload.json >/dev/null

      - name: Set up Python 3.13
        if: env.DOCS_CHANGED == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up uv
        if: env.DOCS_CHANGED == 'true'
        uses: astral-sh/setup-uv@v3

      - name: Checkout Pitaya
        if: env.DOCS_CHANGED == 'true'
        uses: actions/checkout@v4
        with:
          repository: tact-lang/pitaya
          path: pitaya-src

      - name: Install Pitaya deps via uv
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        run: uv sync

      - name: Build agent Docker image
        if: env.DOCS_CHANGED == 'true'
        run: docker build -t pitaya-agents:latest pitaya-src

      - name: Run PR Review
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
        run: |
          HEAD_SHA="$(git -C "$GITHUB_WORKSPACE" rev-parse HEAD)"
          echo "PR_HEAD_SHA=$HEAD_SHA" >> "$GITHUB_ENV"

          REVIEW_INSTRUCTIONS=$(python3 "$GITHUB_WORKSPACE/.github/scripts/build_review_instructions.py")

          uv run pitaya "Review this pull request" \
            --repo "$GITHUB_WORKSPACE" \
            --base-branch pr_head \
            --strategy pr-review \
            -S reviewers=2 \
            -S ci_fail_policy=never \
            -S include_branches="$BASE_REF" \
            -S review_instructions="$REVIEW_INSTRUCTIONS" \
            --plugin codex \
            --model "openai/gpt-5" \
            --no-tui

      - name: Submit GitHub PR Review
        if: env.DOCS_CHANGED == 'true'
        working-directory: pitaya-src
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          RUN_DIR="$(ls -td results/run_* 2>/dev/null | head -n1)"
          if [ -z "${RUN_DIR:-}" ] || [ ! -d "$RUN_DIR" ]; then
            echo "No results directory found" >&2
            exit 1
          fi

          # Sidecar must exist (selection may be empty when approving clean PRs)
          SIDECAR="$RUN_DIR/review/index.json"
          if [ ! -f "$SIDECAR" ]; then
            echo "Sidecar not found: $SIDECAR" >&2
            exit 1
          fi
          COMMIT_ID="$(jq -r '.commit_id // empty' "$SIDECAR")"
          if [ -z "$COMMIT_ID" ]; then
            echo "commit_id missing in sidecar; aborting." >&2
            exit 1
          fi

          # Build review payload (summary + inline comments)
          INLINE_SEVERITIES="${INLINE_SEVERITIES:-HIGH}"  # comma-separated; default HIGH only
          MAX_COMMENTS="${MAX_COMMENTS:-40}"
          python3 "$GITHUB_WORKSPACE/.github/scripts/build_review_payload.py" \
            --run-dir "$RUN_DIR" \
            --repo "${{ github.repository }}" \
            --sha "$COMMIT_ID" \
            --severities "${INLINE_SEVERITIES}" \
            --max-comments "${MAX_COMMENTS}" > review_payload.json

          API="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/reviews"

          echo "Submitting PR review..."
          echo "Endpoint: $API"
          echo "Event:"; jq -r '.event' review_payload.json || true
          echo "Body (first 200 chars):"; jq -r '.body' review_payload.json | head -c 200; echo; echo
          echo "Inline comments count:"; jq -r '.comments | length' review_payload.json || true

          HTTP_CODE=$(curl -sS -o response.json -w "%{http_code}" -X POST "$API" \
               -H "Authorization: Bearer ${GITHUB_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               -H "Content-Type: application/json" \
               -d @review_payload.json || true)

          echo "GitHub API HTTP: $HTTP_CODE"
          echo "Response body:"; cat response.json || true; echo

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ] && jq -e '.id' response.json >/dev/null 2>&1; then
            echo "Review submitted successfully."
          else
            echo "::warning::Failed to submit review (HTTP $HTTP_CODE). Falling back to timeline comment." >&2
            # Fallback: post the body as a regular PR comment so authors still see the summary
            COMMENT_API="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
            jq -n --arg body "$(jq -r '.body' review_payload.json)" '{body:$body}' > payload.json
            HTTP_CODE2=$(curl -sS -o response2.json -w "%{http_code}" -X POST "$COMMENT_API" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/json" \
              -d @payload.json || true)
            echo "Fallback GitHub API HTTP: $HTTP_CODE2"
            echo "Response body:"; cat response2.json || true; echo
            if [ "$HTTP_CODE2" -ge 200 ] && [ "$HTTP_CODE2" -lt 300 ] && jq -e '.id' response2.json >/dev/null 2>&1; then
              echo "Fallback comment submitted successfully."
            else
              echo "Failed to submit fallback comment (HTTP $HTTP_CODE2)." >&2
              exit 1
            fi
          fi

      - name: Collect Pitaya logs
        if: env.DOCS_CHANGED == 'true'
        id: pitaya_artifacts
        working-directory: pitaya-src
        run: |
          set -euo pipefail
          if compgen -G "logs/run_*" >/dev/null || compgen -G "results/run_*" >/dev/null; then
            tar -czf pitaya-artifacts.tar.gz logs/run_* results/run_* 2>/dev/null || true
            echo "has_artifacts=true" >> "$GITHUB_OUTPUT"
          else
            echo "No Pitaya logs or results to archive." >&2
            echo "has_artifacts=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Pitaya artifact bundle
        if: env.DOCS_CHANGED == 'true' && steps.pitaya_artifacts.outputs.has_artifacts == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pitaya-logs-${{ github.run_id }}
          path: pitaya-src/pitaya-artifacts.tar.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: Swap reaction based on outcome
        if: always() && github.event_name == 'issue_comment'
        env:
          GH_TOKEN: ${{ github.token }}
          COMMENT_ID: ${{ github.event.comment.id }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          remove_reaction() {
            if [ -n "${COMMENT_REACTION_ID:-}" ]; then
              if ! gh api -X DELETE \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${REPO}/issues/comments/${COMMENT_ID}/reactions/${COMMENT_REACTION_ID}" \
                >/dev/null; then
                status=$?
                echo "::warning::Failed to remove initial reaction from comment ${COMMENT_ID} (exit ${status})." >&2
              fi
            fi
          }
          if [ "${DOCS_CHANGED:-false}" != "true" ]; then
            # No docs review was performed; just remove eyes and exit.
            remove_reaction
            exit 0
          fi
          RUN_DIR="$(ls -td results/run_* 2>/dev/null | head -n1 || true)"
          REACTION_END="confused"  # default to sad; only rocket on PASS
          if [ -n "$RUN_DIR" ] && [ -d "$RUN_DIR/instances" ]; then
            COMPOSER_META="$(grep -rl '"role": "composer"' "$RUN_DIR/instances" | head -n1 || true)"
            if [ -n "$COMPOSER_META" ] && [ -f "$COMPOSER_META" ]; then
              VERDICT=$(jq -r '.metrics.pr_review_verdict // ""' "$COMPOSER_META")
              if [ "${VERDICT^^}" = "PASS" ]; then
                REACTION_END="rocket"
              fi
            fi
          fi
          remove_reaction
          if ! gh api -X POST \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/issues/comments/${COMMENT_ID}/reactions" \
            -f content="$REACTION_END" >/dev/null; then
            status=$?
            echo "::warning::Failed to add ${REACTION_END} reaction to comment ${COMMENT_ID} (exit ${status})." >&2
          fi

      - name: Remove PR reaction (finish)
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          if [ -n "${PR_REACTION_ID:-}" ]; then
            if ! gh api -X DELETE \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${REPO}/issues/${PR_NUMBER}/reactions/${PR_REACTION_ID}" \
              >/dev/null; then
              status=$?
              echo "::warning::Failed to remove eyes reaction from PR ${PR_NUMBER} (exit ${status})." >&2
            fi
          fi
