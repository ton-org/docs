{
  "openapi": "3.1.0",
  "info": {
    "title": "TON HTTP API",
    "description": "\nThis API enables HTTP access to TON blockchain - getting accounts and wallets information, looking up blocks and transactions, sending messages to the blockchain, calling get methods of smart contracts, and more.\n\nIn addition to REST API, all methods are available through [JSON-RPC endpoint](#json%20rpc)  with `method` equal to method name and `params` passed as a dictionary.\n\nThe response contains a JSON object, which always has a boolean field `ok` and either `error` or `result`. If `ok` equals true, the request was successful and the result of the query can be found in the `result` field. In case of an unsuccessful request, `ok` equals false and the error is explained in the `error`.\n\nAPI Key should be sent either as `api_key` query parameter or `X-API-Key` header.\n",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://toncenter.com/api/v2"
    },
    {
      "url": "https://testnet.toncenter.com/api/v2"
    }
  ],
  "paths": {
    "/getAddressInformation": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account state and balance",
        "description": "Get basic information about the address: balance, code, data, last_transaction_id.",
        "operationId": "get_address_information_getAddressInformation_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAddressInformationResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "raw.fullAccountState",
                        "balance": "1592521995920473",
                        "extra_currencies": [],
                        "code": "te6cckEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVBC9ba0=",
                        "data": "te6cckEBAQEAKgAAUAAAAVUpqaMXcsnta2Km4uuhSpO5BGLno2d3e+uKOPsVufM4RNIs4v+Z1A2U",
                        "last_transaction_id": {
                          "@type": "internal.transactionId",
                          "lt": "60294179000005",
                          "hash": "opzfb6lX3inMMTbyvp8Z/FmrrdgZ4D/NPZvDZOkjd0E="
                        },
                        "block_id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 50940162,
                          "root_hash": "S3S4Otb/vX2ZZDsOAB2a3Deqf3+K3aerm7qodto/nt8=",
                          "file_hash": "h/bCahzQzEMzwRwnDBpzmN1m1/wjyA0BUy/HTtBbirs="
                        },
                        "frozen_hash": "",
                        "sync_utime": 1755281542,
                        "@extra": "1755281559.4317498:12:0.19337888420712945",
                        "state": "active"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getExtendedAddressInformation": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get detailed account state (extended)",
        "description": "Similar to previous one but tries to parse additional information for known contract types. This method is based on tonlib's function *getAccountState*. For detecting wallets we recommend to use *getWalletInformation*.",
        "operationId": "get_extended_address_information_getExtendedAddressInformation_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExtendedAddressInformationResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "fullAccountState",
                        "address": {
                          "@type": "accountAddress",
                          "account_address": "EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N"
                        },
                        "balance": "1592521995920473",
                        "extra_currencies": [],
                        "last_transaction_id": {
                          "@type": "internal.transactionId",
                          "lt": "60294179000005",
                          "hash": "opzfb6lX3inMMTbyvp8Z/FmrrdgZ4D/NPZvDZOkjd0E="
                        },
                        "block_id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 50940791,
                          "root_hash": "8Zcn3qPdpJY5nBOIOG5h/v3ABrPRQoahCOgbSmmICS0=",
                          "file_hash": "BLvAHAZGs/Zoozhdsn5VvADALGQc+CoaQBSUqj1tKWo="
                        },
                        "sync_utime": 1755283118,
                        "account_state": {
                          "@type": "wallet.v3.accountState",
                          "wallet_id": "698983191",
                          "seqno": 341
                        },
                        "revision": 2,
                        "@extra": "1755283135.0102983:6:0.11795169251963"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getWalletInformation": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get wallet information",
        "description": "Retrieve wallet information. This method parses contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.",
        "operationId": "get_wallet_information_getWalletInformation_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWalletInformationResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": {
                        "wallet": true,
                        "balance": "1592521995920473",
                        "extra_currencies": [],
                        "account_state": "active",
                        "wallet_type": "v3",
                        "seqno": 341,
                        "last_transaction_id": {
                          "lt": "60294179000005",
                          "hash": "opzfb6lX3inMMTbyvp8Z/FmrrdgZ4D/NPZvDZOkjd0E="
                        },
                        "wallet_id": "698983191",
                        "public_key": "0x..."
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getTransactions": {
      "get": {
        "tags": [
          "Accounts",
          "Transactions"
        ],
        "summary": "List account transactions",
        "description": "Get transaction history of a given address.",
        "operationId": "get_transactions_getTransactions_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          },
          {
            "description": "Maximum number of transactions in response.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "exclusiveMinimum": 0,
              "title": "Limit",
              "description": "Maximum number of transactions in response.",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Logical time of transaction to start with, must be sent with *hash*.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Lt",
              "description": "Logical time of transaction to start with, must be sent with *hash*."
            },
            "name": "lt",
            "in": "query"
          },
          {
            "description": "Hash of transaction to start with, in *base64* or *hex* encoding , must be sent with *lt*.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Hash",
              "description": "Hash of transaction to start with, in *base64* or *hex* encoding , must be sent with *lt*."
            },
            "name": "hash",
            "in": "query"
          },
          {
            "description": "Logical time of transaction to finish with (to get tx from *lt* to *to_lt*).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "To Lt",
              "description": "Logical time of transaction to finish with (to get tx from *lt* to *to_lt*).",
              "default": 0
            },
            "name": "to_lt",
            "in": "query"
          },
          {
            "description": "By default getTransaction request is processed by any available liteserver. If *archival=true* only liteservers with full history are used.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Archival",
              "description": "By default getTransaction request is processed by any available liteserver. If *archival=true* only liteservers with full history are used.",
              "default": false
            },
            "name": "archival",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getAddressBalance": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account balance only",
        "description": "Get balance (in nanotons) of a given address.",
        "operationId": "get_address_balance_getAddressBalance_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResultResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": "1592521995920473"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getAddressState": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get account lifecycle state",
        "description": "Get state of a given address. State can be either *unitialized*, *active* or *frozen*.",
        "operationId": "get_address_getAddressState_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressStateResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": "active"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/packAddress": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Convert raw address to user-friendly format",
        "description": "Convert an address from raw to human-readable format.",
        "operationId": "pack_address_packAddress_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in raw form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in raw form."
            },
            "example": "0:83DFD552E63729B472FCBCC8C45EBCC6691702558B68EC7527E1BA403A0F31A8",
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResultResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": "EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/unpackAddress": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Convert user-friendly address to raw format",
        "description": "Convert an address from human-readable to raw format.",
        "operationId": "unpack_address_unpackAddress_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in user-friendly form",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in user-friendly form"
            },
            "example": "EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N",
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResultResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": "0:83DFD552E63729B472FCBCC8C45EBCC6691702558B68EC7527E1BA403A0F31A8"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getMasterchainInfo": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get latest masterchain info",
        "description": "Get up-to-date masterchain state.",
        "operationId": "get_masterchain_info_getMasterchainInfo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMasterchainInfoResponse"
                },
                "examples": {
                  "sample1": {
                    "summary": "Example 1",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.masterchainInfo",
                        "last": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 51148696,
                          "root_hash": "pdEYB4jzhoEFdOMdCgfXJ0z4vylDW27ETqVaSJEDyqs=",
                          "file_hash": "l3sF5XbGapYGFnma+6dIk0fuZYdJYO4yAkNsjDkyxcc="
                        },
                        "state_root_hash": "qJ2FQ7fySAnOvgIKI9laL5Mgk8rQWT+Tc/O2xUFzwWs=",
                        "init": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "0",
                          "seqno": 0,
                          "root_hash": "F6OpKZKqvqeFp6CQmFomXNMfMj2EnaUSOXN+Mh+wVWk=",
                          "file_hash": "XplPz01CXAps5qeSWUtxcyBfdAo5zVb1N979KLSKD24="
                        },
                        "@extra": "1755812855.1928415:3:0.47373957740114636"
                      }
                    }
                  },
                  "sample2": {
                    "summary": "Example 2",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.masterchainInfo",
                        "last": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 34539805,
                          "root_hash": "z1gmtb/KbcNwHDVLOHphfDcYMfDtRyW5sTDLuNbPd2E=",
                          "file_hash": "/3zsB+Lr0mONcRGZ+tx2jNC1VkOHCXfmjJ9Wai2iUlQ="
                        },
                        "state_root_hash": "/WR0k35BrgggvPUVglES3I4wt3SrHvU39T5YQQ0Dd2w=",
                        "init": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "0",
                          "seqno": 0,
                          "root_hash": "gj+B8wb/AmlPk1z1AhVI484rhrUpgSr2oSFIh56VoSg=",
                          "file_hash": "Z+IKwYS54DmmJmesw/nAD5DzWadnOCMzee+kdgSYDOg="
                        }
                      },
                      "@extra": "1755812953:0:0.712"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getMasterchainBlockSignatures": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get masterchain block signatures",
        "description": "Get up-to-date masterchain state.",
        "operationId": "get_masterchain_block_signatures_getMasterchainBlockSignatures_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno"
            },
            "name": "seqno",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMasterchainBlockSignaturesResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Block signatures example (truncated)",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.blockSignatures",
                        "id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 51148806,
                          "root_hash": "I/+MoS7TB7Zuw+g5QH3bPBFMcM5Wf4h1Coig3g2osFQ=",
                          "file_hash": "BhPAjDTVPDqH8z6DLq9jAjZiZiiIUQW/f667jJgfoyw="
                        },
                        "signatures": [
                          {
                            "@type": "blocks.signature",
                            "node_id_short": "axRYlEuV/4Fo94EbDtfpEnqJukpAsNNgmZqQz7e01ew=",
                            "signature": "xTBbMLBnJau/VxzOln6jW2zwIMx4WY/+hO3IWwqklNnAAzvYY2X/pqutkJNj5E1f4BjKp84sukuTErS0fFZUAA=="
                          }
                        ],
                        "@extra": "1755813145.584844:11:0.877388442408124"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getShardBlockProof": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get shard block proof",
        "description": "Get merkle proof of shardchain block.",
        "operationId": "get_shard_block_proof_getShardBlockProof_get",
        "parameters": [
          {
            "description": "Block workchain id",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Workchain",
              "description": "Block workchain id"
            },
            "name": "workchain",
            "in": "query"
          },
          {
            "description": "Block shard id",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shard",
              "description": "Block shard id"
            },
            "name": "shard",
            "in": "query"
          },
          {
            "description": "Block seqno",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno",
              "description": "Block seqno"
            },
            "name": "seqno",
            "in": "query"
          },
          {
            "description": "Seqno of masterchain block starting from which proof is required. If not specified latest masterchain block is used.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "From Seqno",
              "description": "Seqno of masterchain block starting from which proof is required. If not specified latest masterchain block is used."
            },
            "name": "from_seqno",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShardBlockProofResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Shard block proof example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.shardBlockProof",
                        "from": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 51148869,
                          "root_hash": "HxogBiV2YA+KrC9cJa5llfvDGNk2hwCqsaCSYo40V00=",
                          "file_hash": "h7LOaX0cTqc8qKecsNYi32SVu0McCito3P2qzynvdqk="
                        },
                        "mc_id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 51148869,
                          "root_hash": "HxogBiV2YA+KrC9cJa5llfvDGNk2hwCqsaCSYo40V00=",
                          "file_hash": "h7LOaX0cTqc8qKecsNYi32SVu0McCito3P2qzynvdqk="
                        },
                        "links": [],
                        "mc_proof": [],
                        "@extra": "1755813789.6827312:12:0.9450183392434569"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getConsensusBlock": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get latest consensus block",
        "description": "Get consensus block and its update timestamp.",
        "operationId": "get_consensus_block_getConsensusBlock_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConsensusBlockResponse"
                },
                "examples": {
                  "sample1": {
                    "summary": "Consensus block example 1",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.masterchainInfo",
                        "last": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 51148869,
                          "root_hash": "HxogBiV2YA+KrC9cJa5llfvDGNk2hwCqsaCSYo40V00=",
                          "file_hash": "h7LOaX0cTqc8qKecsNYi32SVu0McCito3P2qzynvdqk="
                        },
                        "state_root_hash": "SU9xlvY1tnXd/E06/9Ls8DOjNcCNpqf4wtJhC0+viok=",
                        "init": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "0",
                          "seqno": 0,
                          "root_hash": "F6OpKZKqvqeFp6CQmFomXNMfMj2EnaUSOXN+Mh+wVWk=",
                          "file_hash": "XplPz01CXAps5qeSWUtxcyBfdAo5zVb1N979KLSKD24="
                        },
                        "@extra": "1755813293.2727234:6:0.6121521629223031"
                      }
                    }
                  },
                  "sample2": {
                    "summary": "Consensus block example 2",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.masterchainInfo",
                        "last": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 34540013,
                          "root_hash": "uX5uaK8EVq90YRy3hTgdMzM2bjnXkcqcKOZJPAFv+Dk=",
                          "file_hash": "68Zd55gJrmESJD6MAqua4yADxYUg6zOhh8BFzl3GRrA="
                        },
                        "state_root_hash": "FVv5b6iHA/9IBdUtGGCAOWthmqJpwikz4J2UdcbLjEk=",
                        "init": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "0",
                          "seqno": 0,
                          "root_hash": "gj+B8wb/AmlPk1z1AhVI484rhrUpgSr2oSFIh56VoSg=",
                          "file_hash": "Z+IKwYS54DmmJmesw/nAD5DzWadnOCMzee+kdgSYDOg="
                        }
                      },
                      "@extra": "1755813463:11:25.756"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/lookupBlock": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Look up block by height, LT, or timestamp",
        "description": "Look up block by either *seqno*, *lt* or *unixtime*.",
        "operationId": "lookup_block_lookupBlock_get",
        "parameters": [
          {
            "description": "Workchain id to look up block in",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Workchain",
              "description": "Workchain id to look up block in"
            },
            "name": "workchain",
            "in": "query"
          },
          {
            "description": "Shard id to look up block in",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shard",
              "description": "Shard id to look up block in"
            },
            "name": "shard",
            "in": "query"
          },
          {
            "description": "Block's height",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Seqno",
              "description": "Block's height"
            },
            "name": "seqno",
            "in": "query"
          },
          {
            "description": "Block's logical time",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Lt",
              "description": "Block's logical time"
            },
            "name": "lt",
            "in": "query"
          },
          {
            "description": "Block's unixtime",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Unixtime",
              "description": "Block's unixtime"
            },
            "name": "unixtime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupBlockResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Lookup block example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "ton.blockIdExt",
                        "workchain": -1,
                        "shard": "-9223372036854775808",
                        "seqno": 51148869,
                        "root_hash": "HxogBiV2YA+KrC9cJa5llfvDGNk2hwCqsaCSYo40V00=",
                        "file_hash": "h7LOaX0cTqc8qKecsNYi32SVu0McCito3P2qzynvdqk=",
                        "@extra": "1755814026.5747118:7:0.2443600480097572"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/shards": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get shards at masterchain seqno",
        "description": "Get shards information.",
        "operationId": "get_shards_shards_get",
        "parameters": [
          {
            "description": "Masterchain seqno to fetch shards of.",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno",
              "description": "Masterchain seqno to fetch shards of."
            },
            "name": "seqno",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShardsResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Shards example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.shards",
                        "shards": [
                          {
                            "@type": "ton.blockIdExt",
                            "workchain": 0,
                            "shard": "-9223372036854775808",
                            "seqno": 56262735,
                            "root_hash": "02rdYNPA1GWvph+2udLPvddNDvtP/nglA7Q8HR82KMk=",
                            "file_hash": "Ae/QaLnzAhzr2TCHJWFMb+yAg64roTKDq6qLAA7Pt58="
                          }
                        ],
                        "@extra": "1755814149.1458454:3:0.786727927934394"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getBlockTransactions": {
      "get": {
        "tags": [
          "Blocks",
          "Transactions"
        ],
        "summary": "List block transactions",
        "description": "Get transactions of the given block.",
        "operationId": "get_block_transactions_getBlockTransactions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Workchain"
            },
            "name": "workchain",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shard"
            },
            "name": "shard",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno"
            },
            "name": "seqno",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Root Hash"
            },
            "name": "root_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "File Hash"
            },
            "name": "file_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "After Lt"
            },
            "name": "after_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "After Hash"
            },
            "name": "after_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Count",
              "default": 40
            },
            "name": "count",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockTransactionsResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Block transactions example (truncated)",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.transactions",
                        "id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 2,
                          "root_hash": "4bzgnFItQjTVEMYL9c/VHshMJttG9gDIXCzsMQdjKSU=",
                          "file_hash": "2gOSTo8fuMWgA18snVD1RUtTfpU5LvCQWOOQ16Z7w5Y="
                        },
                        "req_count": 40,
                        "incomplete": false,
                        "transactions": [
                          {
                            "@type": "blocks.shortTxId",
                            "mode": 135,
                            "account": "-1:0000000000000000000000000000000000000000000000000000000000000000",
                            "lt": "2000001",
                            "hash": "LdAqBYfzsG3XSu0fYdYNXqkWCGZ495u/9KGf7BUQTxY="
                          }
                        ],
                        "@extra": "1755814400.2039871:0:0.4571250134343233"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getBlockTransactionsExt": {
      "get": {
        "tags": [
          "Blocks",
          "Transactions"
        ],
        "summary": "List block transactions (extended details)",
        "description": "Get transactions of the given block.",
        "operationId": "get_block_transactions_ext_getBlockTransactionsExt_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Workchain"
            },
            "name": "workchain",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shard"
            },
            "name": "shard",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno"
            },
            "name": "seqno",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Root Hash"
            },
            "name": "root_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "File Hash"
            },
            "name": "file_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "After Lt"
            },
            "name": "after_lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "After Hash"
            },
            "name": "after_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Count",
              "default": 40
            },
            "name": "count",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockTransactionsExtResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Extended block transactions example (truncated)",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.transactionsExt",
                        "id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 1,
                          "root_hash": "8GYhhrigd8CwZGrRT59iulLDcgiTYuvOAzFJxugc0Ts=",
                          "file_hash": "V+XzykEwun4yePZhAEPZk77RbMfMOgS/S4GiJkSKY6s="
                        },
                        "req_count": 40,
                        "incomplete": false,
                        "transactions": [
                          {
                            "@type": "raw.transaction",
                            "address": {
                              "@type": "accountAddress",
                              "account_address": "Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"
                            },
                            "utime": 1573822385,
                            "data": "te6cckECCAEAASUAA69w...",
                            "transaction_id": {
                              "@type": "internal.transactionId",
                              "lt": "1000001",
                              "hash": "50ctdvRx74CQ4/JW5ziragzoKzYhgxCTjPtrtjD61TU="
                            },
                            "fee": "0",
                            "storage_fee": "0",
                            "other_fee": "0",
                            "in_msg": {
                              "@type": "raw.message",
                              "hash": "5sUeIdwmkqF4ye2/w904xrE2H+Kcg66mZZqT0Dlab8o=",
                              "source": {
                                "@type": "accountAddress",
                                "account_address": "Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"
                              },
                              "destination": {
                                "@type": "accountAddress",
                                "account_address": "Ef8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAU"
                              },
                              "value": "0",
                              "extra_currencies": [
                                {
                                  "@type": "extraCurrency",
                                  "id": 239,
                                  "amount": "666666666666"
                                },
                                {
                                  "@type": "extraCurrency",
                                  "id": -17,
                                  "amount": "1000000000000"
                                }
                              ],
                              "fwd_fee": "0",
                              "ihr_fee": "0",
                              "created_lt": "1000000",
                              "body_hash": "lqKW0iTyhcZ77pPDD4owkVfw2qNdxbh+QQt4YwoJz8c=",
                              "msg_data": {
                                "@type": "msg.dataRaw",
                                "body": "te6cckEBAQEAAgAAAEysuc0=",
                                "init_state": ""
                              }
                            },
                            "out_msgs": [],
                            "account": "-1:0000000000000000000000000000000000000000000000000000000000000000"
                          }
                        ],
                        "@extra": "1755814593.0613906:1:0.8158701007745434"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getBlockHeader": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get block header metadata",
        "description": "Get metadata of a given block.",
        "operationId": "get_block_header_getBlockHeader_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Workchain"
            },
            "name": "workchain",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Shard"
            },
            "name": "shard",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Seqno"
            },
            "name": "seqno",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Root Hash"
            },
            "name": "root_hash",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "File Hash"
            },
            "name": "file_hash",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockHeaderResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Block header example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.header",
                        "id": {
                          "@type": "ton.blockIdExt",
                          "workchain": -1,
                          "shard": "-9223372036854775808",
                          "seqno": 1,
                          "root_hash": "8GYhhrigd8CwZGrRT59iulLDcgiTYuvOAzFJxugc0Ts=",
                          "file_hash": "V+XzykEwun4yePZhAEPZk77RbMfMOgS/S4GiJkSKY6s="
                        },
                        "global_id": -239,
                        "version": 0,
                        "after_merge": false,
                        "after_split": false,
                        "before_split": false,
                        "want_merge": false,
                        "want_split": false,
                        "validator_list_hash_short": -1447544682,
                        "catchain_seqno": 0,
                        "min_ref_mc_seqno": 1,
                        "is_key_block": false,
                        "prev_key_block_seqno": 0,
                        "start_lt": "1000000",
                        "end_lt": "1000012",
                        "gen_utime": 1573822385,
                        "prev_blocks": [
                          {
                            "@type": "ton.blockIdExt",
                            "workchain": -1,
                            "shard": "-9223372036854775808",
                            "seqno": 0,
                            "root_hash": "F6OpKZKqvqeFp6CQmFomXNMfMj2EnaUSOXN+Mh+wVWk=",
                            "file_hash": "XplPz01CXAps5qeSWUtxcyBfdAo5zVb1N979KLSKD24="
                          }
                        ],
                        "@extra": "1755814930.1088252:0:0.1467032130574265"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getConfigParam": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get single config parameter",
        "description": "Get config by id.",
        "operationId": "get_config_param_getConfigParam_get",
        "parameters": [
          {
            "description": "Config id",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Config Id",
              "description": "Config id"
            },
            "name": "config_id",
            "in": "query"
          },
          {
            "description": "Masterchain seqno. If not specified, latest blockchain state will be used.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Seqno",
              "description": "Masterchain seqno. If not specified, latest blockchain state will be used."
            },
            "name": "seqno",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigParamResponse"
                },
                "examples": {
                  "sample1": {
                    "summary": "Config param example 1",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "configInfo",
                        "config": {
                          "@type": "tvm.cell",
                          "bytes": "te6cckEBAQEAIgAAQFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV+A4W5w=="
                        },
                        "@extra": "1755815155.2328486:7:0.49669713612622723"
                      }
                    }
                  },
                  "sample2": {
                    "summary": "Config param example 2",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "configInfo",
                        "config": {
                          "@type": "tvm.cell",
                          "bytes": "te6cckEBAQEAHgAAN3ARDZMW7AAHI4byb8EAAIAQp0GkYngAAAAwAAhFxfKI"
                        },
                        "@extra": "1755815171.7872128:2:0.12302096281892438"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getConfigAll": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get all config parameters",
        "description": "Get cell with full config.",
        "operationId": "get_config_all_getConfigAll_get",
        "parameters": [
          {
            "description": "Masterchain seqno. If not specified, latest blockchain state will be used.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Seqno",
              "description": "Masterchain seqno. If not specified, latest blockchain state will be used."
            },
            "name": "seqno",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigAllResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "All config parameters example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "configInfo",
                        "config": {
                          "@type": "tvm.cell",
                          "bytes": "te6cckIDB4wAAQAAARdQAAAACASAAAQAgLgYAAAAAgAAAAAAAQAAAAA="
                        },
                        "@extra": "1755815324.351419:11:0.2985065689610278"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getLibraries": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get smart contract libraries",
        "description": "Get libraries codes.",
        "operationId": "get_libraries_getLibraries_get",
        "parameters": [
          {
            "description": "List of base64 encoded libraries hashes",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Libraries",
              "description": "List of base64 encoded libraries hashes"
            },
            "name": "libraries",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string",
                          "example": "smc.libraryResult"
                        },
                        "result": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string",
                                "example": "smc.libraryEntry"
                              },
                              "hash": {
                                "type": "string",
                                "example": "RZuqu83SGYHpN7D/5z+dUoN/hO08EXrRJg1TXsFigAo="
                              },
                              "data": {
                                "type": "string",
                                "description": "Base64-encoded library data"
                              }
                            }
                          }
                        },
                        "@extra": {
                          "type": "string",
                          "example": "1758735556.956807:1:0.731451399868406"
                        }
                      }
                    }
                  },
                  "required": ["ok", "result"]
                },
                "examples": {
                  "sample": {
                    "summary": "Example response",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "smc.libraryResult",
                        "result": [
                          {
                            "@type": "smc.libraryEntry",
                            "hash": "RZuqu83SGYHpN7D/5z+dUoN/hO08EXrRJg1TXsFigAo=",
                            "data": "te6ccgECDQEAA4kAART/APSkE/..."
                          }
                        ],
                        "@extra": "1758735556.956807:1:0.731451399868406"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getOutMsgQueueSizes": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get outgoing message queue sizes",
        "description": "Get info with current sizes of messages queues by shards.",
        "operationId": "get_out_msg_queue_sizes_getOutMsgQueueSizes_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOutMsgQueueSizesResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Outgoing message queue sizes example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "blocks.outMsgQueueSizes",
                        "shards": [
                          {
                            "@type": "blocks.outMsgQueueSize",
                            "id": {
                              "@type": "ton.blockIdExt",
                              "workchain": -1,
                              "shard": "-9223372036854775808",
                              "seqno": 51149550,
                              "root_hash": "aa5DrbypWLx+3hICy5IOusAsMB8LA+JY41tjUtlYVhQ=",
                              "file_hash": "Yd96kDamNL490591/O2unVWv9FUrkANnso8ZMwEHtqU="
                            },
                            "size": 0
                          },
                          {
                            "@type": "blocks.outMsgQueueSize",
                            "id": {
                              "@type": "ton.blockIdExt",
                              "workchain": 0,
                              "shard": "-9223372036854775808",
                              "seqno": 56263368,
                              "root_hash": "jdalpRwHiguMp1Vxij4gWAkdzeIN56M0mfrjb9tVvmY=",
                              "file_hash": "/j8B/o8axBw0DZOlv1WGqvPh/KgJFeV8S4p3Ai2EDzQ="
                            },
                            "size": 0
                          }
                        ],
                        "ext_msg_queue_size_limit": 8000,
                        "@extra": "1755815024.4620872:9:0.8277963175010491"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/getTokenData": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get NFT or Jetton metadata",
        "description": "Get NFT or Jetton information.",
        "operationId": "get_token_data_getTokenData_get",
        "parameters": [
          {
            "description": "Address of NFT collection/item or Jetton master/wallet smart contract",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Address of NFT collection/item or Jetton master/wallet smart contract"
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenDataResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": {
                        "@type": "nft.item",
                        "init": true,
                        "index": 123,
                        "owner_address": "EQ...",
                        "collection_address": "EQ...",
                        "content": {
                          "uri": "ipfs://..."
                        },
                        "metadata": {
                          "name": "Example NFT",
                          "image": "ipfs://..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/tryLocateTx": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Locate transaction by incoming message",
        "description": "Locate outcoming transaction of *destination* address by incoming message.",
        "operationId": "get_try_locate_tx_tryLocateTx_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Destination"
            },
            "name": "destination",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Created Lt"
            },
            "name": "created_lt",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/tryLocateResultTx": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Locate result transaction by incoming message",
        "description": "Same as previous. Locate outcoming transaction of *destination* address by incoming message",
        "operationId": "get_try_locate_result_tx_tryLocateResultTx_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Destination"
            },
            "name": "destination",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Created Lt"
            },
            "name": "created_lt",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/tryLocateSourceTx": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Locate source transaction by outgoing message",
        "description": "Locate incoming transaction of *source* address by outcoming message.",
        "operationId": "get_try_locate_source_tx_tryLocateSourceTx_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source"
            },
            "name": "source",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Destination"
            },
            "name": "destination",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Created Lt"
            },
            "name": "created_lt",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/detectAddress": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Detect all address formats",
        "description": "Get all possible address forms.",
        "operationId": "detect_address_detectAddress_get",
        "parameters": [
          {
            "description": "Identifier of target TON account in any form.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Address",
              "description": "Identifier of target TON account in any form."
            },
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectAddressResponse"
                },
                "examples": {
                  "sample": {
                    "summary": "Example",
                    "value": {
                      "ok": true,
                      "result": {
                        "raw_form": "0:83DF...31A8",
                        "bounceable": "EQCD39VS5jcptHL8v...",
                        "non_bounceable": "UQCD39VS5jcptHL8v..."
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/sendBoc": {
      "post": {
        "tags": [
          "Messages and transactions"
        ],
        "summary": "Send external message (BOC)",
        "description": "Send serialized boc file: fully packed and serialized external message to blockchain.",
        "operationId": "send_boc_sendBoc_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_send_boc_sendBoc_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/sendBocReturnHash": {
      "post": {
        "tags": [
          "Messages and transactions"
        ],
        "summary": "Send external message and return hash",
        "description": "Send serialized boc file: fully packed and serialized external message to blockchain. The method returns message hash.",
        "operationId": "send_boc_return_hash_sendBocReturnHash_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_send_boc_return_hash_sendBocReturnHash_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/sendQuery": {
      "post": {
        "tags": [
          "Messages and transactions"
        ],
        "summary": "Send unpacked external query",
        "description": "Send query - unpacked external message. This method takes address, body and init-params (if any), packs it to external message and sends to network. All params should be boc-serialized.",
        "operationId": "send_query_sendQuery_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_send_query_sendQuery_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/estimateFee": {
      "post": {
        "tags": [
          "Messages and transactions"
        ],
        "summary": "Estimate transaction fees",
        "description": "Estimate fees required for query processing. *body*, *init-code* and *init-data* accepted in serialized format (b64-encoded).",
        "operationId": "estimate_fee_estimateFee_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_estimate_fee_estimateFee_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/runGetMethod": {
      "post": {
        "tags": [
          "Smart contracts"
        ],
        "summary": "Run get-method on contract",
        "description": "Run get method on smart contract.",
        "operationId": "run_get_method_runGetMethod_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_run_get_method_runGetMethod_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    },
    "/jsonRPC": {
      "post": {
        "tags": [
          "JSON-RPC"
        ],
        "summary": "JSON-RPC handler",
        "description": "All methods in the API are available through JSON-RPC protocol ([spec](https://www.jsonrpc.org/specification)).",
        "operationId": "jsonrpc_handler_jsonRPC_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TonRequestJsonRPC"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeprecatedTonResponseJsonRPC"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          },
          "504": {
            "description": "Lite Server Timeout"
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Body_estimate_fee_estimateFee_post": {
        "properties": {
          "address": {
            "type": "string",
            "title": "Address",
            "description": "Address in any format"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "description": "b64-encoded cell with message body"
          },
          "init_code": {
            "type": "string",
            "title": "Init Code",
            "description": "b64-encoded cell with init-code",
            "default": ""
          },
          "init_data": {
            "type": "string",
            "title": "Init Data",
            "description": "b64-encoded cell with init-data",
            "default": ""
          },
          "ignore_chksig": {
            "type": "boolean",
            "title": "Ignore Chksig",
            "description": "If true during test query processing assume that all chksig operations return True",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "address",
          "body"
        ],
        "title": "Body_estimate_fee_estimateFee_post"
      },
      "Body_run_get_method_runGetMethod_post": {
        "properties": {
          "address": {
            "type": "string",
            "title": "Address",
            "description": "Contract address"
          },
          "method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Method",
            "description": "Method name or method id"
          },
          "stack": {
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array",
            "title": "Stack",
            "description": "Array of stack elements: `[['num',3], ['cell', cell_object], ['slice', slice_object]]`"
          },
          "seqno": {
            "type": "integer",
            "title": "Seqno",
            "description": "Seqno of masterchain block at which moment the Get Method is to be executed"
          }
        },
        "type": "object",
        "required": [
          "address",
          "method",
          "stack"
        ],
        "title": "Body_run_get_method_runGetMethod_post"
      },
      "Body_send_boc_return_hash_sendBocReturnHash_post": {
        "properties": {
          "boc": {
            "type": "string",
            "title": "Boc",
            "description": "b64 encoded bag of cells"
          }
        },
        "type": "object",
        "required": [
          "boc"
        ],
        "title": "Body_send_boc_return_hash_sendBocReturnHash_post"
      },
      "Body_send_boc_sendBoc_post": {
        "properties": {
          "boc": {
            "type": "string",
            "title": "Boc",
            "description": "b64 encoded bag of cells"
          }
        },
        "type": "object",
        "required": [
          "boc"
        ],
        "title": "Body_send_boc_sendBoc_post"
      },
      "Body_send_query_sendQuery_post": {
        "properties": {
          "address": {
            "type": "string",
            "title": "Address",
            "description": "Address in any format"
          },
          "body": {
            "type": "string",
            "title": "Body",
            "description": "b64-encoded boc-serialized cell with message body"
          },
          "init_code": {
            "type": "string",
            "title": "Init Code",
            "description": "b64-encoded boc-serialized cell with init-code",
            "default": ""
          },
          "init_data": {
            "type": "string",
            "title": "Init Data",
            "description": "b64-encoded boc-serialized cell with init-data",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "address",
          "body"
        ],
        "title": "Body_send_query_sendQuery_post"
      },
      "DeprecatedTonResponseJsonRPC": {
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "Ok"
          },
          "result": {
            "title": "Result"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "code": {
            "type": "integer",
            "title": "Code"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "jsonrpc": {
            "type": "string",
            "title": "Jsonrpc",
            "default": "2.0"
          }
        },
        "type": "object",
        "required": [
          "ok",
          "id"
        ],
        "title": "DeprecatedTonResponseJsonRPC"
      },
      "TonRequestJsonRPC": {
        "properties": {
          "method": {
            "type": "string",
            "title": "Method"
          },
          "params": {
            "type": "object",
            "title": "Params",
            "default": {}
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "jsonrpc": {
            "type": "string",
            "title": "Jsonrpc"
          }
        },
        "type": "object",
        "required": [
          "method"
        ],
        "title": "TonRequestJsonRPC"
      },
      "TonResponse": {
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "Ok"
          },
          "result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Result"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "code": {
            "type": "integer",
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "ok"
        ],
        "title": "TonResponse"
      },
      "InternalTransactionId": {
        "type": "object",
        "description": "Internal transaction identifier.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "internal.transactionId"
          },
          "lt": {
            "type": "string",
            "description": "Logical time."
          },
          "hash": {
            "type": "string",
            "description": "Base64 hash of the tx."
          }
        },
        "required": [
          "lt",
          "hash"
        ]
      },
      "TonBlockIdExt": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "ton.blockIdExt"
          },
          "workchain": {
            "type": "integer"
          },
          "shard": {
            "type": "string",
            "description": "64-bit signed integer as string"
          },
          "seqno": {
            "type": "integer"
          },
          "root_hash": {
            "type": "string"
          },
          "file_hash": {
            "type": "string"
          }
        },
        "required": [
          "workchain",
          "shard",
          "seqno",
          "root_hash",
          "file_hash"
        ],
        "description": "Extended block identifier."
      },
      "AccountAddress": {
        "type": "object",
        "description": "Account address object.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "accountAddress"
          },
          "account_address": {
            "type": "string",
            "description": "Friendly address string."
          }
        },
        "required": [
          "account_address"
        ]
      },
      "GetAddressInformationResult": {
        "type": "object",
        "description": "Raw account state augmented with computed `state`. Fields come directly from tonlib.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "raw.fullAccountState"
          },
          "address": {
            "$ref": "#/components/schemas/AccountAddress"
          },
          "balance": {
            "type": "string",
            "description": "Balance in nanotons."
          },
          "extra_currencies": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "code": {
            "type": "string",
            "description": "Base64-encoded code cell"
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded data cell"
          },
          "last_transaction_id": {
            "$ref": "#/components/schemas/InternalTransactionId"
          },
          "block_id": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "frozen_hash": {
            "type": "string"
          },
          "sync_utime": {
            "type": "integer"
          },
          "@extra": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "uninitialized",
              "active",
              "frozen"
            ],
            "description": "Computed from code/frozen_hash by the API server."
          }
        },
        "required": [
          "balance",
          "last_transaction_id",
          "state"
        ]
      },
      "GetAddressInformationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/GetAddressInformationResult"
              }
            }
          }
        ]
      },
      "GetExtendedAddressInformationResult": {
        "type": "object",
        "description": "Generic account state decoded by tonlib; contract-specific `account_state` may contain typed fields (e.g., wallet.v3.accountState).",
        "properties": {
          "@type": {
            "type": "string",
            "example": "fullAccountState"
          },
          "address": {
            "$ref": "#/components/schemas/AccountAddress"
          },
          "balance": {
            "type": "string"
          },
          "extra_currencies": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "last_transaction_id": {
            "$ref": "#/components/schemas/InternalTransactionId"
          },
          "block_id": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "sync_utime": {
            "type": "integer"
          },
          "account_state": {
            "type": "object",
            "description": "Decoded state depending on contract type. For wallets, may include wallet_id and seqno.",
            "properties": {
              "@type": {
                "type": "string",
                "example": "wallet.v3.accountState"
              },
              "wallet_id": {
                "type": "string"
              },
              "seqno": {
                "type": "integer"
              }
            },
            "additionalProperties": true
          },
          "revision": {
            "type": "integer"
          },
          "@extra": {
            "type": "string"
          }
        },
        "required": [
          "balance",
          "last_transaction_id"
        ]
      },
      "GetExtendedAddressInformationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/GetExtendedAddressInformationResult"
              }
            }
          }
        ]
      },
      "GetWalletInformationResult": {
        "type": "object",
        "description": "Parsed wallet info built by the API: wallet flags + wallet-specific fields if recognized.",
        "properties": {
          "wallet": {
            "type": "boolean"
          },
          "balance": {
            "type": "string"
          },
          "extra_currencies": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "account_state": {
            "type": "string",
            "enum": [
              "uninitialized",
              "active",
              "frozen"
            ]
          },
          "wallet_type": {
            "type": "string",
            "nullable": true
          },
          "seqno": {
            "type": "integer",
            "nullable": true
          },
          "last_transaction_id": {
            "$ref": "#/components/schemas/InternalTransactionId"
          },
          "wallet_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          }
        },
        "required": [
          "wallet",
          "balance",
          "extra_currencies",
          "account_state"
        ]
      },
      "GetWalletInformationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/GetWalletInformationResult"
              }
            }
          }
        ]
      },
      "DetectAddressResult": {
        "type": "object",
        "description": "All possible address forms derived from the input. Exact keys depend on pytonlib utils.",
        "properties": {
          "raw_form": {
            "type": "string",
            "description": "Hex raw address (workchain:hash)"
          },
          "bounceable": {
            "type": "string",
            "description": "User-friendly bounceable"
          },
          "non_bounceable": {
            "type": "string",
            "description": "User-friendly non-bounceable"
          }
        },
        "additionalProperties": true
      },
      "DetectAddressResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/DetectAddressResult"
              }
            }
          }
        ]
      },
      "StringResultResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AddressStateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "type": "string",
                "enum": [
                  "uninitialized",
                  "active",
                  "frozen"
                ]
              }
            }
          }
        ]
      },
      "GetTokenDataResult": {
        "type": "object",
        "description": "NFT or Jetton information as returned by tonlib; varies by contract type.",
        "additionalProperties": true
      },
      "GetTokenDataResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/GetTokenDataResult"
              }
            }
          }
        ]
      },
      "BlocksMasterchainInfo": {
        "type": "object",
        "description": "Information about the latest masterchain block.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.masterchainInfo"
          },
          "last": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "state_root_hash": {
            "type": "string"
          },
          "init": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "@extra": {
            "type": "string"
          }
        },
        "required": [
          "last",
          "state_root_hash",
          "init"
        ]
      },
      "GetMasterchainInfoResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/BlocksMasterchainInfo",
                "description": "Information about the latest masterchain block."
              }
            }
          }
        ]
      },
      "BlockSignature": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.signature"
          },
          "node_id_short": {
            "type": "string",
            "description": "Short node ID"
          },
          "signature": {
            "type": "string",
            "description": "Base64 signature"
          }
        },
        "required": [
          "node_id_short",
          "signature"
        ],
        "description": "Validator signature."
      },
      "BlocksBlockSignatures": {
        "type": "object",
        "description": "Validator signatures for a given block.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.blockSignatures"
          },
          "id": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockSignature"
            },
            "description": "List of validator signatures for the block."
          },
          "@extra": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "signatures"
        ]
      },
      "GetMasterchainBlockSignaturesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/BlocksBlockSignatures",
                "description": "Validator signatures for a given block."
              }
            }
          }
        ]
      },
      "GetConsensusBlockResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/BlocksMasterchainInfo",
                "description": "Consensus block information from the masterchain."
              }
            }
          }
        ]
      },
      "BlocksShardBlockProof": {
        "type": "object",
        "description": "Proof of inclusion of a shard block in the masterchain.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.shardBlockProof"
          },
          "from": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "mc_id": {
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "mc_proof": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "@extra": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "mc_id"
        ]
      },
      "GetShardBlockProofResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/BlocksShardBlockProof",
                "description": "Proof of inclusion of a shard block in the masterchain."
              }
            }
          }
        ]
      },
      "LookupBlockResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/TonBlockIdExt",
                "description": "Block identifier for the looked-up block."
              }
            }
          }
        ]
      },
      "BlocksShards": {
        "type": "object",
        "description": "List of shard blocks at a given masterchain seqno.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.shards"
          },
          "shards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TonBlockIdExt"
            },
            "description": "Shard block IDs at the given masterchain seqno."
          },
          "@extra": {
            "type": "string"
          }
        },
        "required": [
          "shards"
        ]
      },
      "ShardsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/BlocksShards",
                "description": "List of shard blocks at a given masterchain seqno."
              }
            }
          }
        ]
      },
      "ShortTxId": {
        "type": "object",
        "description": "Short transaction identifier.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.shortTxId"
          },
          "mode": {
            "type": "integer",
            "description": "Transaction mode flags."
          },
          "account": {
            "type": "string",
            "description": "Account address of the transaction."
          },
          "lt": {
            "type": "string",
            "description": "Logical time of the transaction."
          },
          "hash": {
            "type": "string",
            "description": "Base64 hash of the transaction."
          }
        },
        "required": [
          "account",
          "lt",
          "hash"
        ]
      },
      "BlocksTransactions": {
        "type": "object",
        "description": "Transactions included in a block.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.transactions"
          },
          "id": {
            "description": "Identifier of the block containing the transactions.",
            "$ref": "#/components/schemas/TonBlockIdExt"
          },
          "req_count": {
            "type": "integer",
            "description": "Number of requested transactions."
          },
          "incomplete": {
            "type": "boolean",
            "description": "Indicates if the transaction list is incomplete."
          },
          "transactions": {
            "type": "array",
            "description": "List of short transaction identifiers.",
            "items": {
              "$ref": "#/components/schemas/ShortTxId"
            }
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "id",
          "transactions"
        ]
      },
      "GetBlockTransactionsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "Transactions included in the specified block.",
                "$ref": "#/components/schemas/BlocksTransactions"
              }
            }
          }
        ]
      },
      "ExtraCurrency": {
        "type": "object",
        "description": "Extra currency amount.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "extraCurrency"
          },
          "id": {
            "type": "integer",
            "description": "Currency ID."
          },
          "amount": {
            "type": "string",
            "description": "Amount in smallest units."
          }
        },
        "required": [
          "id",
          "amount"
        ]
      },
      "MsgDataRaw": {
        "type": "object",
        "description": "Raw message data.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "msg.dataRaw"
          },
          "body": {
            "type": "string",
            "description": "Base64-encoded message body."
          },
          "init_state": {
            "type": "string",
            "description": "Base64-encoded init state.",
            "nullable": true
          }
        },
        "required": [
          "body"
        ]
      },
      "RawMessage": {
        "type": "object",
        "description": "Raw message.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "raw.message"
          },
          "hash": {
            "type": "string",
            "description": "Base64 hash of the message."
          },
          "source": {
            "$ref": "#/components/schemas/AccountAddress",
            "description": "Source address."
          },
          "destination": {
            "$ref": "#/components/schemas/AccountAddress",
            "description": "Destination address."
          },
          "value": {
            "type": "string",
            "description": "Value in nanotons."
          },
          "extra_currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtraCurrency"
            },
            "description": "Optional extra currencies."
          },
          "fwd_fee": {
            "type": "string",
            "description": "Forwarding fee in nanotons."
          },
          "ihr_fee": {
            "type": "string",
            "description": "Instant Hypercube Routing fee in nanotons."
          },
          "created_lt": {
            "type": "string",
            "description": "Message creation logical time."
          },
          "body_hash": {
            "type": "string",
            "description": "Base64 hash of message body."
          },
          "msg_data": {
            "$ref": "#/components/schemas/MsgDataRaw",
            "description": "Message data."
          }
        },
        "required": [
          "hash",
          "destination",
          "value",
          "created_lt",
          "msg_data"
        ]
      },
      "RawTransaction": {
        "type": "object",
        "description": "Raw transaction object.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "raw.transaction"
          },
          "address": {
            "$ref": "#/components/schemas/AccountAddress",
            "description": "Account address."
          },
          "utime": {
            "type": "integer",
            "description": "UNIX timestamp of the transaction."
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded raw transaction data."
          },
          "transaction_id": {
            "$ref": "#/components/schemas/InternalTransactionId",
            "description": "Internal transaction id."
          },
          "fee": {
            "type": "string",
            "description": "Total fee in nanotons."
          },
          "storage_fee": {
            "type": "string",
            "description": "Storage fee in nanotons."
          },
          "other_fee": {
            "type": "string",
            "description": "Other fees in nanotons."
          },
          "in_msg": {
            "$ref": "#/components/schemas/RawMessage",
            "description": "Incoming message.",
            "nullable": true
          },
          "out_msgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawMessage"
            },
            "description": "Outgoing messages."
          },
          "account": {
            "type": "string",
            "description": "Workchain:hex account id."
          }
        },
        "required": [
          "transaction_id",
          "fee",
          "other_fee",
          "out_msgs",
          "account"
        ]
      },
      "BlocksTransactionsExt": {
        "type": "object",
        "description": "Extended transactions included in a block.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.transactionsExt"
          },
          "id": {
            "$ref": "#/components/schemas/TonBlockIdExt",
            "description": "Identifier of the block."
          },
          "req_count": {
            "type": "integer",
            "description": "Number of requested transactions."
          },
          "incomplete": {
            "type": "boolean",
            "description": "Whether the list is truncated."
          },
          "transactions": {
            "type": "array",
            "description": "Verbose transaction list with raw messages.",
            "items": {
              "$ref": "#/components/schemas/RawTransaction"
            }
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "id",
          "transactions"
        ]
      },
      "GetBlockTransactionsExtResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "Extended transactions included in the specified block.",
                "$ref": "#/components/schemas/BlocksTransactionsExt"
              }
            }
          }
        ]
      },
      "BlocksHeader": {
        "type": "object",
        "description": "Block header information.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.header"
          },
          "id": {
            "$ref": "#/components/schemas/TonBlockIdExt",
            "description": "Extended identifier of the block."
          },
          "global_id": {
            "type": "integer",
            "description": "Global network identifier."
          },
          "version": {
            "type": "integer",
            "description": "Block format version."
          },
          "after_merge": {
            "type": "boolean",
            "description": "True if block was created after a merge."
          },
          "after_split": {
            "type": "boolean",
            "description": "True if block was created after a split."
          },
          "before_split": {
            "type": "boolean",
            "description": "True if block was created before a split."
          },
          "want_merge": {
            "type": "boolean",
            "description": "Indicates if validators wanted a merge."
          },
          "want_split": {
            "type": "boolean",
            "description": "Indicates if validators wanted a split."
          },
          "validator_list_hash_short": {
            "type": "integer",
            "description": "Short hash of validator list."
          },
          "catchain_seqno": {
            "type": "integer",
            "description": "Catchain sequence number."
          },
          "min_ref_mc_seqno": {
            "type": "integer",
            "description": "Minimum referenced masterchain seqno."
          },
          "is_key_block": {
            "type": "boolean",
            "description": "True if this block is a key block."
          },
          "prev_key_block_seqno": {
            "type": "integer",
            "description": "Previous key block sequence number."
          },
          "start_lt": {
            "type": "string",
            "description": "Starting logical time."
          },
          "end_lt": {
            "type": "string",
            "description": "Ending logical time."
          },
          "gen_utime": {
            "type": "integer",
            "description": "Block generation UNIX timestamp."
          },
          "prev_blocks": {
            "type": "array",
            "description": "List of previous block identifiers.",
            "items": {
              "$ref": "#/components/schemas/TonBlockIdExt"
            }
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "id",
          "global_id",
          "version",
          "gen_utime"
        ]
      },
      "GetBlockHeaderResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "Header information of the specified block.",
                "$ref": "#/components/schemas/BlocksHeader"
              }
            }
          }
        ]
      },
      "BlocksOutMsgQueueSize": {
        "type": "object",
        "description": "Size of the outgoing message queue for a shard.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.outMsgQueueSize"
          },
          "id": {
            "$ref": "#/components/schemas/TonBlockIdExt",
            "description": "Block identifier for the shard."
          },
          "size": {
            "type": "integer",
            "description": "Queue size for the shard."
          }
        },
        "required": [
          "id",
          "size"
        ]
      },
      "BlocksOutMsgQueueSizes": {
        "type": "object",
        "description": "Outgoing message queue sizes for shards.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "blocks.outMsgQueueSizes"
          },
          "shards": {
            "type": "array",
            "description": "List of outgoing message queue sizes per shard.",
            "items": {
              "$ref": "#/components/schemas/BlocksOutMsgQueueSize"
            }
          },
          "ext_msg_queue_size_limit": {
            "type": "integer",
            "description": "Limit for the external message queue size."
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "shards",
          "ext_msg_queue_size_limit"
        ]
      },
      "GetOutMsgQueueSizesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "Outgoing message queue sizes for all shards.",
                "$ref": "#/components/schemas/BlocksOutMsgQueueSizes"
              }
            }
          }
        ]
      },
      "TvmCell": {
        "type": "object",
        "description": "Raw TVM cell serialized as base64 bytes.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "tvm.cell"
          },
          "bytes": {
            "type": "string",
            "description": "Base64-encoded BOC bytes."
          }
        },
        "required": [
          "bytes"
        ]
      },
      "ConfigInfo": {
        "type": "object",
        "description": "Configuration parameter payload.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "configInfo"
          },
          "config": {
            "$ref": "#/components/schemas/TvmCell",
            "description": "TVM cell with the parameter contents."
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "config"
        ]
      },
      "GetConfigParamResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "Configuration parameter for the requested id (at optional seqno).",
                "$ref": "#/components/schemas/ConfigInfo"
              }
            }
          }
        ]
      },
      "ConfigAll": {
        "type": "object",
        "description": "All configuration parameters at a specific masterchain state.",
        "properties": {
          "@type": {
            "type": "string",
            "example": "configInfo"
          },
          "config": {
            "$ref": "#/components/schemas/TvmCell",
            "description": "TVM cell containing all configuration parameters."
          },
          "@extra": {
            "type": "string",
            "description": "Extra metadata for the response."
          }
        },
        "required": [
          "config"
        ]
      },
      "GetConfigAllResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TonResponse"
          },
          {
            "type": "object",
            "properties": {
              "result": {
                "description": "All configuration parameters for the requested masterchain seqno.",
                "$ref": "#/components/schemas/ConfigAll"
              }
            }
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Information about accounts."
    },
    {
      "name": "Blocks",
      "description": "Information about blocks."
    },
    {
      "name": "Transactions",
      "description": "Fetching and locating transactions."
    },
    {
      "name": "Config",
      "description": "Get blockchain config"
    },
    {
      "name": "Smart contracts",
      "description": "Run get method of smart contract."
    },
    {
      "name": "Messages and Transactions",
      "description": "Send data to blockchain."
    },
    {
      "name": "JSON-RPC",
      "description": "JSON-RPC endpoint."
    }
  ]
}