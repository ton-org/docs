openapi: 3.0.0
info:
  description: TON Index collects data from a full node to PostgreSQL database and
    provides convenient API to an indexed blockchain.
  title: TON Index (Go)
  contact: {}
  version: 1.1.0
paths:
  /api/v3/accountStates:
    get:
      security: []
      description: Query account states
      tags:
      - Accounts
      summary: Get account states with code/data
      operationId: api_v3_get_account_states
      parameters:
      - description: 'List of addresses in any form to get address book. Max: 1024.'
        name: address
        in: query
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Include code and data BOCs. Default: true'
        name: include_boc
        in: query
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStatesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/actions:
    get:
      security: []
      description: Get actions by specified filter.
      tags:
      - Actions and traces
      summary: List actions by filters (tx, msg, trace)
      operationId: api_v3_get_actions
      parameters:
      - description: List of account addresses to get actions. Can be sent in hex,
          base64 or base64url form.
        name: account
        in: query
        schema:
          type: string
      - description: Find actions by transaction hash.
        name: tx_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find actions by message hash.
        name: msg_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find actions by the action_id.
        name: action_id
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find actions by the trace_id.
        name: trace_id
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Query actions of traces which was completed in masterchain block
          with given seqno
        name: mc_seqno
        in: query
        schema:
          type: integer
      - description: Query actions for traces with `trace_end_utime >= start_utime`.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query actions for traces with `trace_end_utime <= end_utime`.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query actions for traces with `trace_end_lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query actions for traces with `trace_end_lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Include action types.
        name: action_type
        in: query
        explode: true
        schema:
          type: array
          items:
            enum:
            - call_contract
            - contract_deploy
            - ton_transfer
            - auction_bid
            - change_dns
            - dex_deposit_liquidity
            - dex_withdraw_liquidity
            - delete_dns
            - renew_dns
            - election_deposit
            - election_recover
            - jetton_burn
            - jetton_swap
            - jetton_transfer
            - jetton_mint
            - nft_mint
            - tick_tock
            - stake_deposit
            - stake_withdrawal
            - stake_withdrawal_request
            - subscribe
            - unsubscribe
            type: string
      - description: Exclude action types.
        name: exclude_action_type
        in: query
        explode: true
        schema:
          type: array
          items:
            enum:
            - call_contract
            - contract_deploy
            - ton_transfer
            - auction_bid
            - change_dns
            - dex_deposit_liquidity
            - dex_withdraw_liquidity
            - delete_dns
            - renew_dns
            - election_deposit
            - election_recover
            - jetton_burn
            - jetton_swap
            - jetton_transfer
            - jetton_mint
            - nft_mint
            - tick_tock
            - stake_deposit
            - stake_withdrawal
            - stake_withdrawal_request
            - subscribe
            - unsubscribe
            type: string
      - description: Supported action types
        name: supported_action_types
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort actions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/addressBook:
    get:
      security: []
      description: Query address book
      tags:
      - Accounts
      summary: Get account address book
      operationId: api_v3_get_address_book
      parameters:
      - description: 'List of addresses in any form to get address book. Max: 1024.'
        name: address
        in: query
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressBook'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/addressInformation:
    get:
      security: []
      description: Get smart contract information.
      tags:
      - Legacy (v2-compatible)
      summary: Get smart contract state (legacy v2)
      operationId: api_v3_get_v2_addressInformation
      parameters:
      - description: Account address in any form.
        name: address
        in: query
        required: true
        schema:
          type: string
      - description: Use method from api/v2. Not recommended
        name: use_v2
        in: query
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2AddressInformation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/adjacentTransactions:
    get:
      security: []
      description: Get parent and/or children for specified transaction.
      tags:
      - Blockchain Data
      summary: Get parent/child transactions for a hash
      operationId: api_v3_get_adjacent_transactions
      parameters:
      - description: Transaction hash.
        name: hash
        in: query
        schema:
          type: string
      - description: Direction of message.
        name: direction
        in: query
        schema:
          type: string
          enum:
          - in
          - out
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/blocks:
    get:
      security: []
      description: Returns blocks by specified filters.
      tags:
      - Blockchain Data
      summary: List blocks by filters
      operationId: api_v3_get_blocks
      parameters:
      - description: Block workchain.
        name: workchain
        in: query
        schema:
          type: integer
      - description: 'Block shard id. Must be sent with *workchain*. Example: `8000000000000000`.'
        name: shard
        in: query
        schema:
          type: string
      - description: Block block seqno. Must be sent with *workchain* and *shard*.
        name: seqno
        in: query
        schema:
          type: integer
      - description: Masterchain block seqno
        name: mc_seqno
        in: query
        schema:
          type: integer
      - description: Query blocks with generation UTC timestamp **after** given timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query blocks with generation UTC timestamp **before** given timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query blocks with `lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query blocks with `lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort results by UTC timestamp.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/dns/records:
    get:
      security: []
      description: Query DNS records by specified filters. Currently .ton and .t.me
        DNS are supported.
      tags:
      - DNS
      summary: Query DNS records (.ton, .t.me)
      operationId: api_v3_get_dns_records
      parameters:
      - description: Wallet address in any form. DNS records that contain this address
          in wallet category will be returned.
        name: wallet
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSRecordsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/decode:
    get:
      tags: 
      - Utils
      summary: Decode opcodes and bodies
      description: Decode opcodes (hex or decimal) and message bodies (base64 or hex).
      parameters:
        - in: query
          name: opcodes
          description: List of opcodes to decode (hex or decimal).
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - in: query
          name: bodies
          description: List of message bodies to decode (base64 or hex).
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
    post:
      tags: 
      - Utils
      summary: Decode opcodes and bodies
      description: >
        Decode opcodes (hex or decimal) and message bodies (base64 or hex).
        Use POST for long parameter lists that could be truncated in GET.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecodeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/estimateFee:
    post:
      description: Estimate fees required for query processing. Fields body, init-code
        and init-data accepted in serialized format (b64-encoded).
      tags:
      - Legacy (v2-compatible)
      summary: Estimate transaction fees
      operationId: api_v3_post_v2_estimate_fee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2EstimateFeeRequest'
        description: Estimate fee request.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2EstimateFeeResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/jetton/burns:
    get:
      security: []
      description: Get Jetton burns by specified filters
      tags:
      - Jettons
      summary: List Jetton burns
      operationId: api_v3_get_jetton_burns
      parameters:
      - description: Address of jetton wallet owner in any form. Max 1000
        name: address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Jetton wallet address in any form. Max: 1000.'
        name: jetton_wallet
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Jetton master address in any form.
        name: jetton_master
        in: query
        schema:
          type: string
      - description: Query transactions with generation UTC timestamp **after** given
          timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with generation UTC timestamp **before** given
          timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JettonBurnsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/jetton/masters:
    get:
      security: []
      description: Get Jetton masters by specified filters
      tags:
      - Jettons
      summary: List Jetton masters
      operationId: api_v3_get_jetton_masters
      parameters:
      - description: 'Jetton Master address in any form. Max: 1024.'
        name: address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Address of Jetton Master''s admin in any form. Max: 1024.'
        name: admin_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JettonMastersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/jetton/transfers:
    get:
      security: []
      description: Get Jetton transfers by specified filters
      tags:
      - Jettons
      summary: List Jetton transfers
      operationId: api_v3_get_jetton_transfers
      parameters:
      - description: Address of jetton wallet owner in any form. Max 1000
        name: owner_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Jetton wallet address in any form. Max: 1000.'
        name: jetton_wallet
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Jetton master address in any form.
        name: jetton_master
        in: query
        schema:
          type: string
      - description: Direction of transfer. *Note:* applied only with owner_address.
        name: direction
        in: query
        schema:
          type: string
          enum:
          - in
          - out
      - description: Query transactions with generation UTC timestamp **after** given
          timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with generation UTC timestamp **before** given
          timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JettonTransfersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/jetton/wallets:
    get:
      security: []
      description: Get Jetton wallets by specified filters
      tags:
      - Jettons
      summary: List Jetton wallets
      operationId: api_v3_get_jetton_wallets
      parameters:
      - description: 'Jetton wallet address in any form. Max: 1000.'
        name: address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Address of Jetton wallet''s owner in any form. Max: 1000.'
        name: owner_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Jetton Master in any form.
        name: jetton_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Exclude jetton wallets with 0 balance.
        name: exclude_zero_balance
        in: query
        schema:
          type: boolean
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort jetton wallets by balance. **Warning:** results may be inconsistent
          during the read with limit and offset.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JettonWalletsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/masterchainBlockShardState:
    get:
      security: []
      description: Get shard blocks at a masterchain seqno (v2 equivalent)
      tags:
      - Blockchain Data
      summary: Get masterchain block shard state
      operationId: api_v3_get_masterchainBlockShardState
      parameters:
      - description: Masterchain block seqno.
        name: seqno
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/masterchainBlockShards:
    get:
      security: []
      description: Returns all worchain blocks, that appeared after previous masterchain
        block.
      tags:
      - Blockchain Data
      summary: Get workchain blocks after masterchain block
      operationId: api_v3_get_masterchainBlockShards
      parameters:
      - description: Masterchain block seqno.
        name: seqno
        in: query
        required: true
        schema:
          type: integer
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/masterchainInfo:
    get:
      security: []
      description: Get first and last indexed block
      tags:
      - Blockchain Data
      summary: Get indexed masterchain range
      operationId: api_v3_get_masterchain_info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterchainInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/message:
    post:
      description: Send an external message to the TON network.
      tags:
      - Legacy (v2-compatible)
      summary: Send external message (BOC)
      operationId: api_v3_post_v2_message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2SendMessageRequest'
        description: Message in boc base64 format.
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2SendMessageResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/messages:
    get:
      security: []
      description: Get messages by specified filters.
      tags:
      - Blockchain Data
      summary: List messages by filters
      operationId: api_v3_get_messages
      parameters:
      - description: Message hash. Acceptable in hex, base64 and base64url forms.
        name: msg_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Hash of message body.
        name: body_hash
        in: query
        schema:
          type: string
      - description: The source account address. Can be sent in hex, base64 or base64url
          form. Use value `null` to get external messages.
        name: source
        in: query
        schema:
          type: string
      - description: The destination account address. Can be sent in hex, base64 or
          base64url form. Use value `null` to get log messages.
        name: destination
        in: query
        schema:
          type: string
      - description: Opcode of message in hex or signed 32-bit decimal form.
        name: opcode
        in: query
        schema:
          type: string
      - description: Query messages with `created_at >= start_utime`.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query messages with `created_at >= start_utime`.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query messages with `created_lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query messages with `created_lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Direction of message.
        name: direction
        in: query
        schema:
          type: string
          enum:
          - in
          - out
      - description: Exclude external messages.
        name: exclude_externals
        in: query
        schema:
          type: boolean
      - description: Return only external messages.
        name: only_externals
        in: query
        schema:
          type: boolean
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/metadata:
    get:
      security: []
      description: Query address metadata
      tags:
      - Accounts
      summary: Get account metadata
      operationId: api_v3_get_metadata
      parameters:
      - description: 'List of addresses in any form to get address metadata. Max:
          1024.'
        name: address
        in: query
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/nft/collections:
    get:
      security: []
      description: Get NFT collections by specified filters
      tags:
      - NFTs
      summary: List NFT collections
      operationId: api_v3_get_nft_collections
      parameters:
      - description: 'Collection address in any form. Max: 1024.'
        name: collection_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Address of collection owner in any form. Max: 1024.'
        name: owner_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTCollectionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/nft/items:
    get:
      security: []
      description: Get NFT items by specified filters
      tags:
      - NFTs
      summary: Get NFT items
      operationId: api_v3_get_nft_items
      parameters:
      - description: 'NFT item address in any form. Max: 1000.'
        name: address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Address of NFT item owner in any form. Max: 1000.'
        name: owner_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Collection address in any form.
        name: collection_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Index of item for given collection. Max: 1000.'
        name: index
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTItemsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/nft/transfers:
    get:
      security: []
      description: Get transfers of NFT items by specified filters
      tags:
      - NFTs
      summary: List NFT transfers
      operationId: api_v3_get_nft_transfers
      parameters:
      - description: Address of NFT owner in any form. Max 1000
        name: owner_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: 'Address of NFT item in any form. Max: 1000.'
        name: item_address
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Collection address in any form.
        name: collection_address
        in: query
        schema:
          type: string
      - description: Direction of transfer.
        name: direction
        in: query
        schema:
          type: string
          enum:
          - in
          - out
      - description: Query transactions with generation UTC timestamp **after** given
          timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with generation UTC timestamp **before** given
          timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTTransfersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/pendingActions:
    get:
      security: []
      description: Get actions by specified filter.
      tags:
      - Actions and traces
      summary: List pending actions
      operationId: api_v3_get_pending_actions
      parameters:
      - description: List of account addresses to get actions. Can be sent in hex,
          base64 or base64url form.
        name: account
        in: query
        schema:
          type: string
      - description: Find actions by trace external hash
        name: ext_msg_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Supported action types
        name: supported_action_types
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/pendingTraces:
    get:
      security: []
      description: Get traces by specified filter.
      tags:
      - Actions and traces
      summary: List pending traces
      operationId: api_v3_get_pending_traces
      parameters:
      - description: List of account addresses to get transactions. Can be sent in
          hex, base64 or base64url form.
        name: account
        in: query
        schema:
          type: string
      - description: Find trace by external hash
        name: ext_msg_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/pendingTransactions:
    get:
      security: []
      description: Get pending transactions by specified filter.
      tags:
      - Blockchain Data
      summary: List pending transactions
      operationId: api_v3_get_pending_transactions
      parameters:
      - description: List of account addresses to get transactions. Can be sent in
          hex, base64 or base64url form.
        name: account
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find transactions by trace id.
        name: trace_id
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/runGetMethod:
    post:
      description: 'Run get method of smart contract. Stack supports only `num`, `cell`
        and `slice` types:

        ```

        [

        {

        "type": "num",

        "value": "0x12a"

        },

        {

        "type": "cell",

        "value": "te6..." // base64 encoded boc with cell

        },

        {

        "type": "slice",

        "value": "te6..." // base64 encoded boc with slice

        }

        ]

        ```'
      tags:
      - Legacy (v2-compatible)
      summary: Run smart contract get-method
      operationId: api_v3_post_v2_rungetmethod
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2RunGetMethodRequest'
        description: Run Get-method request
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2RunGetMethodRequest'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/topAccountsByBalance:
    get:
      security: []
      description: Get list of accounts sorted descending by balance.
      tags:
      - Stats and analytics
      summary: List top accounts by balance
      operationId: api_v3_get_top_accounts_by_balance
      parameters:
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountBalance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/traces:
    get:
      security: []
      description: Get traces by specified filter.
      tags:
      - Actions and traces
      summary: List completed traces with actions
      operationId: api_v3_get_traces
      parameters:
      - description: List of account addresses to get transactions. Can be sent in
          hex, base64 or base64url form.
        name: account
        in: query
        schema:
          type: string
      - description: Find trace by trace id.
        name: trace_id
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find trace by transaction hash.
        name: tx_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Find trace by message hash.
        name: msg_hash
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Query traces that was completed in masterchain block with given
          seqno
        name: mc_seqno
        in: query
        schema:
          type: integer
      - description: Query traces, which was finished **after** given timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query traces, which was finished **before** given timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query traces with `end_lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query traces with `end_lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Include trace actions.
        name: include_actions
        in: query
        schema:
          type: boolean
          default: false
      - description: Supported action types
        name: supported_action_types
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort traces by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TracesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/transactions:
    get:
      security: []
      description: Get transactions by specified filter.
      tags:
      - Blockchain Data
      summary: Get transactions
      operationId: api_v3_get_transactions
      parameters:
      - description: Block workchain.
        name: workchain
        in: query
        schema:
          type: integer
      - description: 'Block shard id. Must be sent with *workchain*. Example: `8000000000000000`.'
        name: shard
        in: query
        schema:
          type: string
      - description: Block block seqno. Must be sent with *workchain* and *shard*.
        name: seqno
        in: query
        schema:
          type: integer
      - description: Masterchain block seqno.
        name: mc_seqno
        in: query
        schema:
          type: integer
      - description: List of account addresses to get transactions. Can be sent in
          hex, base64 or base64url form.
        name: account
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Exclude transactions on specified account addresses.
        name: exclude_account
        in: query
        explode: true
        schema:
          type: array
          items:
            type: string
      - description: Transaction hash.
        name: hash
        in: query
        schema:
          type: string
      - description: Transaction lt.
        name: lt
        in: query
        schema:
          type: integer
      - description: Query transactions with generation UTC timestamp **after** given
          timestamp.
        name: start_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with generation UTC timestamp **before** given
          timestamp.
        name: end_utime
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt >= start_lt`.
        name: start_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Query transactions with `lt <= end_lt`.
        name: end_lt
        in: query
        schema:
          type: integer
          minimum: 0
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/transactionsByMasterchainBlock:
    get:
      security: []
      description: Returns transactions from masterchain block and from all shards.
      tags:
      - Blockchain Data
      summary: Get transactions by Masterchain block
      operationId: api_v3_get_transactions_by_masterchain_block
      parameters:
      - description: Masterchain block seqno.
        name: seqno
        in: query
        required: true
        schema:
          type: integer
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - description: Sort transactions by lt.
        name: sort
        in: query
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/transactionsByMessage:
    get:
      security: []
      description: Get transactions whose inbound/outbound message has the specified
        hash. \
      tags:
      - Blockchain Data
      summary: Get transactions by message
      operationId: api_v3_get_transactions_by_message
      parameters:
      - description: Message hash. Acceptable in hex, base64 and base64url forms.
        name: msg_hash
        in: query
        schema:
          type: string
      - description: Hash of message body.
        name: body_hash
        in: query
        schema:
          type: string
      - description: Opcode of message in hex or signed 32-bit decimal form.
        name: opcode
        in: query
        schema:
          type: string
      - description: Direction of message.
        name: direction
        in: query
        schema:
          type: string
          enum:
          - in
          - out
      - description: Limit number of queried rows. Use with *offset* to batch read.
        name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
      - description: Skip first N rows. Use with *limit* to batch read.
        name: offset
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/walletInformation:
    get:
      security: []
      description: 'Get wallet smart contract information. The following wallets are
        supported: `v1r1`, `v1r2`, `v1r3`, `v2r1`, `v2r2`, `v3r1`, `v3r2`, `v4r1`,
        `v4r2`, `v5beta`, `v5r1`. In case the account is not a wallet error code 409
        is returned.'
      tags:
      - Legacy (v2-compatible)
      summary: Get wallet information
      operationId: api_v3_get_wallet_information
      parameters:
      - description: Account address in any form.
        name: address
        in: query
        required: true
        schema:
          type: string
      - description: Use method from api/v2. Not recommended
        name: use_v2
        in: query
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V2WalletInformation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
  /api/v3/walletStates:
    get:
      security: []
      description: Query wallet information
      tags:
      - Accounts
      summary: Get wallet states and balances
      operationId: api_v3_get_wallet_states
      parameters:
      - description: 'List of addresses in any form to get address book. Max: 1024.'
        name: address
        in: query
        required: true
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
components:
  schemas:
    AccountBalance:
      type: object
      properties:
        account:
          type: string
        balance:
          type: string
    AccountState:
      type: object
      properties:
        account_status:
          type: string
        balance:
          type: string
        code_boc:
          type: string
        code_hash:
          type: string
        data_boc:
          type: string
        data_hash:
          type: string
        extra_currencies:
          type: object
          additionalProperties:
            type: string
        frozen_hash:
          type: string
        hash:
          type: string
    AccountStateFull:
      type: object
      properties:
        account_state_hash:
          type: string
        address:
          type: string
        balance:
          type: string
        code_boc:
          type: string
        code_hash:
          type: string
        contract_methods:
          type: array
          items:
            type: integer
        data_boc:
          type: string
        data_hash:
          type: string
        extra_currencies:
          type: object
          additionalProperties:
            type: string
        frozen_hash:
          type: string
        last_transaction_hash:
          type: string
        last_transaction_lt:
          type: string
          example: '0'
        status:
          type: string
    AccountStatesResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountStateFull'
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
    Action:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: string
        action_id:
          type: string
        details: {}
        end_lt:
          type: string
          example: '0'
        end_utime:
          type: integer
        start_lt:
          type: string
          example: '0'
        start_utime:
          type: integer
        success:
          type: boolean
        trace_end_lt:
          type: string
          example: '0'
        trace_end_utime:
          type: integer
        trace_external_hash:
          type: string
        trace_external_hash_norm:
          type: string
        trace_id:
          type: string
        trace_mc_seqno_end:
          type: integer
        transactions:
          type: array
          items:
            type: string
        type:
          type: string
    ActionPhase:
      type: object
      properties:
        action_list_hash:
          type: string
        msgs_created:
          type: integer
        no_funds:
          type: boolean
        result_arg:
          type: integer
        result_code:
          type: integer
        skipped_actions:
          type: integer
        spec_actions:
          type: integer
        status_change:
          type: string
        success:
          type: boolean
        tot_actions:
          type: integer
        tot_msg_size:
          $ref: '#/components/schemas/MsgSize'
        total_action_fees:
          type: string
          example: '0'
        total_fwd_fees:
          type: string
          example: '0'
        valid:
          type: boolean
    ActionsResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
    AddressBook:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AddressBookRow'
    AddressBookRow:
      type: object
      properties:
        domain:
          type: string
        user_friendly:
          type: string
    AddressMetadata:
      type: object
      properties:
        is_indexed:
          type: boolean
        token_info:
          type: array
          items:
            $ref: '#/components/schemas/TokenInfo'
    Block:
      type: object
      properties:
        after_merge:
          type: boolean
        after_split:
          type: boolean
        before_split:
          type: boolean
        created_by:
          type: string
        end_lt:
          type: string
          example: '0'
        file_hash:
          type: string
        flags:
          type: integer
        gen_catchain_seqno:
          type: integer
        gen_utime:
          type: string
          example: '0'
        global_id:
          type: integer
        key_block:
          type: boolean
        master_ref_seqno:
          type: integer
        masterchain_block_ref:
          $ref: '#/components/schemas/BlockId'
        min_ref_mc_seqno:
          type: integer
        prev_blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockId'
        prev_key_block_seqno:
          type: integer
        rand_seed:
          type: string
        root_hash:
          type: string
        seqno:
          type: integer
        shard:
          type: string
          example: '0'
        start_lt:
          type: string
          example: '0'
        tx_count:
          type: integer
        validator_list_hash_short:
          type: integer
        version:
          type: integer
        vert_seqno:
          type: integer
        vert_seqno_incr:
          type: boolean
        want_merge:
          type: boolean
        want_split:
          type: boolean
        workchain:
          type: integer
    BlockId:
      type: object
      properties:
        seqno:
          type: integer
        shard:
          type: string
          example: '0'
        workchain:
          type: integer
    BlocksResponse:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
    BouncePhase:
      type: object
      properties:
        fwd_fees:
          type: string
          example: '0'
        msg_fees:
          type: string
          example: '0'
        msg_size:
          $ref: '#/components/schemas/MsgSize'
        req_fwd_fees:
          type: string
          example: '0'
        type:
          type: string
    ComputePhase:
      type: object
      properties:
        account_activated:
          type: boolean
        exit_arg:
          type: integer
        exit_code:
          type: integer
        gas_credit:
          type: string
          example: '0'
        gas_fees:
          type: string
          example: '0'
        gas_limit:
          type: string
          example: '0'
        gas_used:
          type: string
          example: '0'
        mode:
          type: integer
        msg_state_used:
          type: boolean
        reason:
          type: string
        skipped:
          type: boolean
        success:
          type: boolean
        vm_final_state_hash:
          type: string
        vm_init_state_hash:
          type: string
        vm_steps:
          type: integer
    CreditPhase:
      type: object
      properties:
        credit:
          type: string
          example: '0'
        credit_extra_currencies:
          type: object
          additionalProperties:
            type: string
        due_fees_collected:
          type: string
          example: '0'
    DNSRecord:
      type: object
      properties:
        dns_next_resolver:
          type: string
        dns_site_adnl:
          type: string
        dns_storage_bag_id:
          type: string
        dns_wallet:
          type: string
        domain:
          type: string
        nft_item_address:
          type: string
        nft_item_owner:
          type: string
    DNSRecordsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        records:
          type: array
          items:
            $ref: '#/components/schemas/DNSRecord'
    DecodedContent:
      type: object
      nullable: true
      additionalProperties: true
      properties:
        type:
          type: string
        comment:
          type: string
        data:
          type: object
          additionalProperties: true
    DecodeRequest:
      type: object
      properties:
        opcodes:
          type: array
          items:
            type: string
          description: Opcodes in hex (with or without 0x) or decimal format.
        bodies:
          type: array
          items:
            type: string
          description: Message bodies in base64 or hex format.
    DecodeResponse:
      type: object
      properties:
        opcodes:
          type: array
          items:
            type: string
          description: Decoded opcode names or identifiers.
        bodies:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Decoded message bodies as structured objects (scheme-dependent).
      example:
        opcodes:
          - "jetton_transfer"
        bodies:
          - type: "jetton_transfer"
            data:
              amount: "1000000000"
              destination: "0:abcd..."
              response_destination: null
              custom_payload: null
    JettonBurn:
      type: object
      properties:
        amount:
          type: string
        custom_payload:
          type: string
        jetton_master:
          type: string
        jetton_wallet:
          type: string
        owner:
          type: string
        query_id:
          type: string
        response_destination:
          type: string
        trace_id:
          type: string
        transaction_aborted:
          type: boolean
        transaction_hash:
          type: string
        transaction_lt:
          type: string
          example: '0'
        transaction_now:
          type: integer
        decoded_custom_payload:
          $ref: '#/components/schemas/DecodedContent'
    JettonBurnsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        jetton_burns:
          type: array
          items:
            $ref: '#/components/schemas/JettonBurn'
        metadata:
          $ref: '#/components/schemas/Metadata'
    JettonMaster:
      type: object
      properties:
        address:
          type: string
        admin_address:
          type: string
        code_hash:
          type: string
        data_hash:
          type: string
        jetton_content:
          type: object
          additionalProperties: true
        jetton_wallet_code_hash:
          type: string
        last_transaction_lt:
          type: string
          example: '0'
        mintable:
          type: boolean
        total_supply:
          type: string
    JettonMastersResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        jetton_masters:
          type: array
          items:
            $ref: '#/components/schemas/JettonMaster'
        metadata:
          $ref: '#/components/schemas/Metadata'
    JettonTransfer:
      type: object
      properties:
        amount:
          type: string
        custom_payload:
          type: string
        destination:
          type: string
        forward_payload:
          type: string
        forward_ton_amount:
          type: string
        jetton_master:
          type: string
        query_id:
          type: string
        response_destination:
          type: string
        source:
          type: string
        source_wallet:
          type: string
        trace_id:
          type: string
        transaction_aborted:
          type: boolean
        transaction_hash:
          type: string
        transaction_lt:
          type: string
          example: '0'
        transaction_now:
          type: integer
        decoded_custom_payload:
          $ref: '#/components/schemas/DecodedContent'
        decoded_forward_payload:
          $ref: '#/components/schemas/DecodedContent'
    JettonTransfersResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        jetton_transfers:
          type: array
          items:
            $ref: '#/components/schemas/JettonTransfer'
        metadata:
          $ref: '#/components/schemas/Metadata'
    JettonWallet:
      type: object
      properties:
        address:
          type: string
        balance:
          type: string
        code_hash:
          type: string
        data_hash:
          type: string
        jetton:
          type: string
        last_transaction_lt:
          type: string
          example: '0'
        mintless_info:
          $ref: '#/components/schemas/JettonWalletMintlessInfo'
        owner:
          type: string
    JettonWalletMintlessInfo:
      type: object
      properties:
        amount:
          type: string
        custom_payload_api_uri:
          type: array
          items:
            type: string
        expire_at:
          type: integer
        start_from:
          type: integer
    JettonWalletsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        jetton_wallets:
          type: array
          items:
            $ref: '#/components/schemas/JettonWallet'
        metadata:
          $ref: '#/components/schemas/Metadata'
    MasterchainInfo:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/Block'
        last:
          $ref: '#/components/schemas/Block'
    Message:
      type: object
      properties:
        bounce:
          type: boolean
        bounced:
          type: boolean
        created_at:
          type: string
          example: '0'
        created_lt:
          type: string
          example: '0'
        destination:
          type: string
        fwd_fee:
          type: string
          example: '0'
        hash:
          type: string
        hash_norm:
          type: string
        ihr_disabled:
          type: boolean
        ihr_fee:
          type: string
          example: '0'
        import_fee:
          type: string
          example: '0'
        in_msg_tx_hash:
          type: string
        init_state:
          $ref: '#/components/schemas/MessageContent'
        message_content:
          $ref: '#/components/schemas/MessageContent'
        opcode:
          type: integer
        out_msg_tx_hash:
          type: string
        source:
          type: string
        value:
          type: string
          example: '0'
        value_extra_currencies:
          type: object
          additionalProperties:
            type: string
    MessageContent:
      type: object
      properties:
        body:
          type: string
        decoded:
          $ref: '#/components/schemas/DecodedContent'
        hash:
          type: string
    MessagesResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        metadata:
          $ref: '#/components/schemas/Metadata'
    Metadata:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AddressMetadata'
    MsgSize:
      type: object
      properties:
        bits:
          type: string
          example: '0'
        cells:
          type: string
          example: '0'
    NFTCollection:
      type: object
      properties:
        address:
          type: string
        code_hash:
          type: string
        collection_content:
          type: object
          additionalProperties: true
        data_hash:
          type: string
        last_transaction_lt:
          type: string
          example: '0'
        next_item_index:
          type: string
        owner_address:
          type: string
    NFTCollectionsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
        nft_collections:
          type: array
          items:
            $ref: '#/components/schemas/NFTCollection'
    NFTItem:
      type: object
      properties:
        address:
          type: string
        auction_contract_address:
          type: string
        code_hash:
          type: string
        collection:
          $ref: '#/components/schemas/NFTCollection'
        collection_address:
          type: string
        content:
          type: object
          additionalProperties: true
        data_hash:
          type: string
        index:
          type: string
        init:
          type: boolean
        last_transaction_lt:
          type: string
          example: '0'
        on_sale:
          type: boolean
        owner_address:
          type: string
        real_owner:
          type: string
        sale_contract_address:
          type: string
    NFTItemsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
        nft_items:
          type: array
          items:
            $ref: '#/components/schemas/NFTItem'
    NFTTransfer:
      type: object
      properties:
        custom_payload:
          type: string
        forward_amount:
          type: string
        forward_payload:
          type: string
        new_owner:
          type: string
        nft_address:
          type: string
        nft_collection:
          type: string
        old_owner:
          type: string
        query_id:
          type: string
        response_destination:
          type: string
        trace_id:
          type: string
        transaction_aborted:
          type: boolean
        transaction_hash:
          type: string
        transaction_lt:
          type: string
          example: '0'
        transaction_now:
          type: integer
        decoded_forward_payload:
          $ref: '#/components/schemas/DecodedContent'
    NFTTransfersResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
        nft_transfers:
          type: array
          items:
            $ref: '#/components/schemas/NFTTransfer'
    RequestError:
      type: object
      properties:
        code:
          type: integer
        error:
          type: string
    SplitInfo:
      type: object
      properties:
        acc_split_depth:
          type: integer
        cur_shard_pfx_len:
          type: integer
        sibling_addr:
          type: string
        this_addr:
          type: string
    StoragePhase:
      type: object
      properties:
        status_change:
          type: string
        storage_fees_collected:
          type: string
          example: '0'
        storage_fees_due:
          type: string
          example: '0'
    TokenInfo:
      type: object
      properties:
        description:
          type: string
        extra:
          type: object
          additionalProperties: true
        image:
          type: string
        name:
          type: string
        nft_index:
          type: string
        symbol:
          type: string
        type:
          type: string
        valid:
          type: boolean
    Trace:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        end_lt:
          type: string
          example: '0'
        end_utime:
          type: integer
        external_hash:
          type: string
        is_incomplete:
          type: boolean
        mc_seqno_end:
          type: string
        mc_seqno_start:
          type: string
        start_lt:
          type: string
          example: '0'
        start_utime:
          type: integer
        trace:
          $ref: '#/components/schemas/TraceNode'
        trace_id:
          type: string
        trace_info:
          $ref: '#/components/schemas/TraceMeta'
        transactions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Transaction'
        transactions_order:
          type: array
          items:
            type: string
        warning:
          type: string
    TraceMeta:
      type: object
      properties:
        classification_state:
          type: string
        messages:
          type: integer
        pending_messages:
          type: integer
        trace_state:
          type: string
        transactions:
          type: integer
    TracesResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
        traces:
          type: array
          items:
            $ref: '#/components/schemas/Trace'
    Transaction:
      type: object
      properties:
        account:
          type: string
        account_state_after:
          $ref: '#/components/schemas/AccountState'
        account_state_before:
          $ref: '#/components/schemas/AccountState'
        block_ref:
          $ref: '#/components/schemas/BlockId'
        description:
          $ref: '#/components/schemas/TransactionDescr'
        emulated:
          type: boolean
        end_status:
          type: string
        hash:
          type: string
        in_msg:
          $ref: '#/components/schemas/Message'
        lt:
          type: string
          example: '0'
        mc_block_seqno:
          type: integer
        now:
          type: integer
        orig_status:
          type: string
        out_msgs:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        prev_trans_hash:
          type: string
        prev_trans_lt:
          type: string
          example: '0'
        total_fees:
          type: string
          example: '0'
        total_fees_extra_currencies:
          type: object
          additionalProperties:
            type: string
        trace_external_hash:
          type: string
        trace_id:
          type: string
    TransactionDescr:
      type: object
      properties:
        aborted:
          type: boolean
        action:
          $ref: '#/components/schemas/ActionPhase'
        bounce:
          $ref: '#/components/schemas/BouncePhase'
        compute_ph:
          $ref: '#/components/schemas/ComputePhase'
        credit_first:
          type: boolean
        credit_ph:
          $ref: '#/components/schemas/CreditPhase'
        destroyed:
          type: boolean
        installed:
          type: boolean
        is_tock:
          type: boolean
        split_info:
          $ref: '#/components/schemas/SplitInfo'
        storage_ph:
          $ref: '#/components/schemas/StoragePhase'
        type:
          type: string
    TransactionsResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    V2AddressInformation:
      type: object
      properties:
        balance:
          type: string
        code:
          type: string
        data:
          type: string
        frozen_hash:
          type: string
        last_transaction_hash:
          type: string
        last_transaction_lt:
          type: string
        status:
          type: string
    V2EstimateFeeRequest:
      type: object
      properties:
        address:
          type: string
        body:
          type: string
        ignore_chksig:
          type: boolean
        init_code:
          type: string
        init_data:
          type: string
    V2EstimateFeeResult:
      type: object
      properties:
        destination_fees:
          type: array
          items:
            $ref: '#/components/schemas/V2EstimatedFee'
        source_fees:
          $ref: '#/components/schemas/V2EstimatedFee'
    V2EstimatedFee:
      type: object
      properties:
        fwd_fee:
          type: integer
        gas_fee:
          type: integer
        in_fwd_fee:
          type: integer
        storage_fee:
          type: integer
    V2RunGetMethodRequest:
      type: object
      properties:
        address:
          type: string
        method:
          type: string
        stack:
          type: array
          items:
            $ref: '#/components/schemas/V2StackEntity'
    V2SendMessageRequest:
      type: object
      properties:
        boc:
          type: string
    V2SendMessageResult:
      type: object
      properties:
        message_hash:
          type: string
        message_hash_norm:
          type: string
    V2StackEntity:
      type: object
      properties:
        type:
          type: string
        value: {}
    V2WalletInformation:
      type: object
      properties:
        balance:
          type: string
        last_transaction_hash:
          type: string
        last_transaction_lt:
          type: string
        seqno:
          type: integer
        status:
          type: string
        wallet_id:
          type: integer
        wallet_type:
          type: string
    WalletState:
      type: object
      properties:
        address:
          type: string
        balance:
          type: string
        code_hash:
          type: string
        extra_currencies:
          type: object
          additionalProperties:
            type: string
        is_signature_allowed:
          type: boolean
        is_wallet:
          type: boolean
        last_transaction_hash:
          type: string
        last_transaction_lt:
          type: string
          example: '0'
        seqno:
          type: integer
        status:
          type: string
        wallet_id:
          type: integer
        wallet_type:
          type: string
    WalletStatesResponse:
      type: object
      properties:
        address_book:
          $ref: '#/components/schemas/AddressBook'
        metadata:
          $ref: '#/components/schemas/Metadata'
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletState'
    TraceNode:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/TraceNode'
        in_msg:
          $ref: '#/components/schemas/Message'
        in_msg_hash:
          type: string
        transaction:
          $ref: '#/components/schemas/Transaction'
        transaction_hash:
          type: string
        transaction_lt:
          type: string
        transaction_now:
          type: integer
        transaction_aborted:
          type: boolean
servers:
- url: https://toncenter.com
- url: https://testnet.toncenter.com/
